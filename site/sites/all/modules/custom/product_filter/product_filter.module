<?php

define("TYPE_VID", 3);
define("BRAND_VID", 2);

function product_filter_menu() {
    $items = array();

//    $items['products'] = array(
//        'title' => 'Products',
//        'description' => 'Products.',
//        'page callback' => 'product_filter_results',
//        'access arguments' => array('access content'),
//        'type' => MENU_SUGGESTED_ITEM,
//    );

    $items['products/search'] = array(
        'title' => 'Search results',
        'description' => 'Product search results.',
        'page callback' => 'product_filter_results',
        'access arguments' => array('access content'),
        'type' => MENU_SUGGESTED_ITEM,
    );

    $items['products/filter'] = array(
        'title' => 'Ajax results',
        'description' => 'Ajax results, used for textfield filter.',
        'page callback' => '_product_filter_ajax',
        'access arguments' => array('access content'),
        'type' => MENU_SUGGESTED_ITEM,
    );

    return $items;
}

function product_filter_results() {
    $items_per_page = 10;

    $matches = array();

    if ($_GET["type"] && $_GET["brand"]) {
        $result = db_query("SELECT nid FROM term_node WHERE tid = {$_GET["type"]} OR tid = {$_GET["brand"]} GROUP BY nid HAVING COUNT(nid) = 2");
        $count_result = db_query("SELECT nid FROM term_node WHERE tid = {$_GET["type"]} OR tid = {$_GET["brand"]} GROUP BY nid HAVING COUNT(*) = 2");
        while ($data = db_fetch_object($count_result)) {
            $count = $count + 1;
        }
    }

    if ($_GET["type"] && !$result) {
        $result = pager_query("SELECT nid FROM term_node WHERE tid = {$_GET["type"]}", $items_per_page);
        $count = db_fetch_object(db_query("SELECT COUNT(nid) as count FROM term_node WHERE tid = {$_GET["type"]}"))->count;
    }

    if ($_GET["brand"] && !$result) {
        $result = pager_query("SELECT nid FROM term_node WHERE tid = {$_GET["brand"]}", $items_per_page);
        $count = db_fetch_object(db_query("SELECT COUNT(nid) as count FROM term_node WHERE tid = {$_GET["brand"]}"))->count;
    }

    if (!$_GET["type"] && !$_GET["brand"]) {
        $result = pager_query("SELECT nid FROM node WHERE type = 'product'", $items_per_page);
        $count = db_fetch_object(db_query("SELECT COUNT(nid) as count FROM node"))->count;
    }

    while ($data = db_fetch_object($result)) {
        $matches[] = $data->nid;
    }

    $brand = ($_GET["brand"]) ? taxonomy_get_term($_GET["brand"])->name : NULL;
    $type = ($_GET["type"]) ? taxonomy_get_term($_GET["type"])->name : NULL;

    foreach ($matches as $nid) {

        $node = node_load($nid);

        $products[] = theme("product_item", array(
                    'image' => theme('imagecache', 'product-thumbnail', $node->field_image[0]['filepath']),
                    'title' => $node->title,
                    'body' => $node->field_summary[0]["value"],
                    'price' => "&pound" . number_format($node->field_price[0]['value'], 2),
                    'path' => "node/{$node->nid}",
                ));
    }

    $content = array(
        "brand" => $brand,
        "type" => $type,
        "amount" => $count,
    );

    $output .= theme("product_filter_page", $products, $content);
    $output .= theme('pager', NULL, $items_per_page);

    return $output;
}

function product_filter_theme($existing, $type, $theme, $path) {
    $path = drupal_get_path('module', 'product_filter') . '/theme';

    return array(
        'featured_products' => array(
            'arguments' => array(
                'products' => array(),
            ),
            'template' => 'featured_products',
            'path' => $path,
        ),
        'product_item' => array(
            'arguments' => array(
                'product' => array(),
            ),
            'template' => 'product_item',
            'path' => $path,
        ),
        'product_filter_page' => array(
            'arguments' => array(
                'products' => null,
                'settings' => null,
            ),
            'template' => 'product_filter_page',
            'path' => $path,
        ),
    );
}

function product_filter_block($op = 'list', $delta = 0, $edit = array()) {
    drupal_add_css(drupal_get_path('module', 'product_filter') . "/css/product_filter.css");

    switch ($op) {
        case 'list':

            $blocks['product_block'] = array(
                'info' => t('Product filter block'),
                'weight' => 0,
            );

            $blocks['product_block_2'] = array(
                'info' => t('Product filter block 2'),
                'weight' => 0,
            );

            $blocks['product_block_featured'] = array(
                'info' => t('Product featured block'),
                'weight' => 0,
            );

            $blocks['product_block_related'] = array(
                'info' => t('Related Products'),
                'weight' => 0,
            );

            return $blocks;

            break;

        case 'configure' :

            switch ($delta) {

                case 'product_block_featured':

                    $form['product_block_featured_1'] = array(
                        '#type' => 'select',
                        '#title' => t('Featured Product 1'),
                        '#default_value' => variable_get('product_block_featured_1', 0),
                        '#description' => "Select which <em>product</em> will feature as item 1.",
                        '#options' => _product_filter_opts(),
                    );

                    $form['product_block_featured_2'] = array(
                        '#type' => 'select',
                        '#title' => t('Featured Product 2'),
                        '#default_value' => variable_get('product_block_featured_2', 0),
                        '#description' => "Select which <em>product</em> will feature as item 2.",
                        '#options' => _product_filter_opts(),
                    );

                    $form['product_block_featured_3'] = array(
                        '#type' => 'select',
                        '#title' => t('Featured Product 3'),
                        '#default_value' => variable_get('product_block_featured_3', 0),
                        '#description' => "Select which <em>product</em> will feature as item 3.",
                        '#options' => _product_filter_opts(),
                    );

                    return $form;

                    break;
            }

            break;

        case 'save';

            switch ($delta) {

                case 'product_block_featured':

                    variable_set('product_block_featured_1', $edit['product_block_featured_1']);
                    variable_set('product_block_featured_2', $edit['product_block_featured_2']);
                    variable_set('product_block_featured_3', $edit['product_block_featured_3']);

                    break;
            }
            break;


        case 'view':

            switch ($delta) {
                case 'product_block':

                    $block = array(
                        'subject' => t('Product filter block'),
                        'content' => drupal_get_form("product_filter_block_1"),
                    );

                    break;

                case 'product_block_2':

                    $block = array(
                        'subject' => t('Product filter block 2'),
                        'content' => drupal_get_form("product_filter_block_3_form"),
                    );

                    break;

                case 'product_block_featured':

                    $featured = array(
                        variable_get('product_block_featured_1', 0),
                        variable_get('product_block_featured_2', 0),
                        variable_get('product_block_featured_3', 0),
                    );

                    $block = array(
                        'subject' => t('Featured Products'),
                        'content' => product_filter_block_2($featured),
                    );

                    break;

                case 'product_block_related':

                    $featured = array(
                        variable_get('product_block_featured_1', 0),
                        variable_get('product_block_featured_2', 0),
                        variable_get('product_block_featured_3', 0),
                    );

                    $block = array(
                        'subject' => t('Related Products'),
                        'content' => product_filter_block_related($featured),
                    );

                    break;
            }

            return $block;

            break;
    }
}

function _product_filter_opts() {

    $products = array();

    $result = db_query("SELECT nid FROM {node} WHERE type = '%s'", "product");

    while ($data = db_fetch_object($result)) {
        $node = node_load($data->nid);

        $products[$node->nid] = $node->title;
    }

    return $products;
}

function _product_filter_brand_opts() {

    $options = array("--- All brands ---");

    $vocab = taxonomy_get_tree(BRAND_VID);

    foreach ($vocab as $term) {
        $options[$term->tid] = $term->name;
    }

    return $options;
}

function _product_filter_type_opts() {

    $options = array("--- All types ---");

    $vocab = taxonomy_get_tree(TYPE_VID);

    foreach ($vocab as $term) {
        $options[$term->tid] = $term->name;
    }

    return $options;
}

function product_filter_block_1($form) {

    $form = array();

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Product name'),
        '#size' => 60,
        '#maxlength' => 128,
        '#required' => TRUE,
        '#autocomplete_path' => "products/filter"
    );

    $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));

    return $form;
}

function product_filter_block_1_submit($form, &$form_state) {
    _product_filter_process_form_values($form_state["values"]);
}

function product_filter_block_2($nodes = array()) {
    $products = array();

    foreach ($nodes as $nid) {
        $node = node_load($nid);
        $products[] = array(
            'image' => theme('imagecache', 'product-thumbnail', $node->field_image[0]['filepath']),
            'title' => $node->title,
            'price' => "&pound" . number_format($node->field_price[0]['value'], 2),
            'path' => "node/{$node->nid}",
        );
    }

    return theme("featured_products", $products);
}

function product_filter_block_related($nodes = array()) {
    // get current node
    $node = node_load(arg(1));

    if (count($node->field_related)) {
        $products = array();

        foreach ($node->field_related as $nid) {
            if ($nid) {
                $product = node_load($nid);
                $products[] = l($product->title, "node/{$product->nid}");
            }
        }

        return (count($products)) ? theme("item_list", $products) : NULL;
    }
}

function product_filter_block_3_form($form) {

    $form = array();

    $form['brand'] = array(
        '#type' => 'select',
        '#title' => t('Brand'),
        '#options' => _product_filter_brand_opts(),
        '#default_value' => (isset($_GET["brand"])) ? $_GET["brand"] : NULL,
    );

    $form['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => _product_filter_type_opts(),
        '#default_value' => (isset($_GET["type"])) ? $_GET["type"] : NULL,
    );

    $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));

    return $form;
}

function product_filter_block_3_form_submit($form, &$form_state) {
    _product_filter_process_form_values($form_state["values"]);
}

function _product_filter_process_form_values($values) {
    $query = array();

    if ($values["brand"]) {
        $query["brand"] = $values["brand"];
    }
    if ($values["type"]) {
        $query["type"] = $values["type"];
    }
    if ($values["title"]) {
        $result = db_query("SELECT title, nid FROM {node} WHERE type = 'product' AND title = '%s'", $values["title"]);
        $node = db_fetch_object($result);

        if ($node) {
            drupal_goto("node/" . $node->nid);
        }

        $query["title"] = $values["title"];
    }


    drupal_goto("products/search", $query);
}

function _product_filter_ajax($string) {
    $matches = array();
    $result = db_query_range("SELECT title FROM {node} WHERE type = 'product' AND LOWER(title) LIKE LOWER('%s%%')", $string, 0, 10);
    while ($node = db_fetch_object($result)) {
        $matches[$node->title] = check_plain($node->title);
    }
    print drupal_to_js($matches);
    exit();
}
