<?php

/**
 * Implementation of hook_taxonomy().
 */
function automenu_taxonomy_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary' && ($op == 'insert' || $op == 'update')) {
    if (isset($array['automenu_taxonomy'])) variable_set('automenu_taxonomy_'. $array['vid'], $array['automenu_taxonomy']);
    if (isset($array['automenu_taxonomy_hide'])) variable_set('automenu_taxonomy_hide_'. $array['vid'], $array['automenu_taxonomy_hide']);
    if (isset($array['automenu_taxonomy_expand'])) variable_set('automenu_taxonomy_expand_'. $array['vid'], $array['automenu_taxonomy_expand']);
  }
  if ($type == 'vocabulary' && $op == 'delete') {
    variable_del('automenu_taxonomy_'. $array['vid']);
    variable_del('automenu_taxonomy_hide_'. $array['vid']);
    variable_del('automenu_taxonomy_expand_'. $array['vid']);
  }
  elseif ($type == 'term' && ($op == 'insert' || $op == 'update')) {
    $menu_settings = variable_get('automenu_taxonomy_' . $array['vid'], 0);
    if (!empty($menu_settings)) {
      $menu_settings = explode(':', $menu_settings);
      
      $mlid = db_result(db_query('SELECT ml.mlid FROM {menu_links} ml WHERE ml.link_path = "%s" AND ml.menu_name = "%s"', 'taxonomy/term/'. $array['tid'], $menu_settings[0]));
      if (isset($array['parent'])) {
        if (is_array($array['parent'])) {
          $plid = db_result(db_query('SELECT ml.mlid FROM {menu_links} ml WHERE ml.link_path = "%s" AND ml.menu_name = "%s"', 'taxonomy/term/'. current($array['parent']), $menu_settings[0]));
        }
        else {
          $plid = db_result(db_query('SELECT ml.mlid FROM {menu_links} ml WHERE ml.link_path = "%s" AND ml.menu_name = "%s"', 'taxonomy/term/'. $array['parent'], $menu_settings[0]));
        }
      }
      
      if (empty($plid)) {
        $plid = $menu_settings[1];
      }
      $new_menu = array(
        'menu_name' => $menu_settings[0],
        'link_path' => 'taxonomy/term/' . $array['tid'],
        'link_title' => $array['name'],
        'plid' => $plid,
        'mlid' => $mlid,
        'hidden' => variable_get('automenu_taxonomy_hide_'. $array['vid'], 0),
        'expanded' => variable_get('automenu_taxonomy_expand_'. $array['vid'], 0),
        'options' => array('alter' => TRUE)
      );
      
      $mlid = menu_link_save($new_menu);
      if (!$mlid) {
        drupal_set_message(t('There was an error saving the auto-menu link.'), 'error');
      }
      else {
        $new_menu['mlid'] = $mlid;
        _i18nmenu_update_item($new_menu);
        drupal_set_message(t('The page was automatically added to: !menu.', array('!menu' => $menu_settings[0])));
      }
    }
  }
  elseif ($type == 'term' && $op == 'delete') {
    $menu_settings = variable_get('automenu_taxonomy_' . $array['vid'], 0);
    if (!empty($menu_settings)) {
      $menu_settings = explode(':', $menu_settings);
      $mlid = db_result(db_query('SELECT ml.mlid FROM {menu_links} ml WHERE ml.link_path = "%s" AND ml.menu_name = "%s"', 'taxonomy/term/'. $array['tid'], $menu_settings[0]));
      menu_link_delete($mlid);
      _i18nmenu_delete_item($mlid);
    }
  }
}

/**
 * Implementation of hook_nodeapi()
 */
function automenu_taxonomy_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      $vid = variable_get('automenu_taxonomy_' . $node->type, 0);

      if ($vid && ($node->menu['link_title'] == '' || $node->menu['delete']) && isset($node->taxonomy[$vid])) {
        $tids = array();
        if (is_array($node->taxonomy[$vid])) $tids = $node->taxonomy[$vid];
        else $tids[] = $node->taxonomy[$vid];
        foreach ($tids as $tid) {
          $menu_settings = variable_get('automenu_taxonomy_' . $vid, 0);
          if (!empty($menu_settings)) {
            $menu_settings = explode(':', $menu_settings);
            $plid = db_result(db_query('SELECT ml.mlid FROM {menu_links} ml WHERE ml.link_path = "%s" AND ml.menu_name = "%s"', 'taxonomy/term/'. $tid, $menu_settings[0]));
            if ($plid) {
              $new_menu = array(
                'menu_name' => $menu_settings[0],
                'link_path' => 'node/' . $node->nid,
                'link_title' => $node->title,
                'plid' => $plid,
                'hidden' => variable_get('automenu_taxonomy_hide_'. $node->type, 0),
              );
              if (!menu_link_save($new_menu)) {
                drupal_set_message(t('There was an error saving the auto-menu link.'), 'error');
              }
              else {
                drupal_set_message(t('The page was automatically added to: !menu.', array('!menu' => $menu_settings[0])));
              }
            }
          }
        }
      }
    break;
  } 
}

/**
 * Implementation of hook_form_alter().
 * Add the "Default Parent Menu" section to content type edit node.
 */
function automenu_taxonomy_form_alter(&$form, $form_state, $form_id) {
  //Taxonomy
  if ($form_id == 'taxonomy_form_vocabulary') {
    $options = array_merge(array("0" => t("None")), menu_parent_options(menu_get_menus(), 0));
    $form['settings']['automenu_taxonomy'] = array(
      '#type' => 'select',
      '#title' => t('Default parent menu'),
      '#default_value' => variable_get('automenu_taxonomy_' . $form['vid']['#value'], 0),
      '#options' => $options,
      '#description' => t('Select the default menu for taxonomy terms. Taxonomy hierarchy will be reused as menu hierarchy.'),
    );
    
    $form['settings']['automenu_taxonomy_hide'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide automenu entry'),
      '#default_value' => variable_get('automenu_taxonomy_hide_' . $form['vid']['#value'], 0),
      '#description' => t('Set all auto generated menu items of this vocabulary to hidden'),
    );
    
    $form['settings']['automenu_taxonomy_expand'] = array(
      '#type' => 'checkbox',
      '#title' => t('Expand automenu entry'),
      '#default_value' => variable_get('automenu_taxonomy_expand_' . $form['vid']['#value'], 0),
      '#description' => t('Set all auto generated menu items of this vocabulary as expanded'),
    );
  }
  //Node
  elseif ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $options = array("0" => t("None"));
    $vocabularies = taxonomy_get_vocabularies($form['#node_type']->type);
    foreach ($vocabularies as $vid => $vocabulary) {
      $options[$vid] = $vocabulary->name;
    }
    
    $form['workflow']['automenu_taxonomy'] = array(
      '#type' => 'select',
      '#title' => t('Taxonomy that is used as parent in the menu'),
      '#default_value' => variable_get('automenu_taxonomy_' . $form['#node_type']->type, 0),
      '#options' => $options,
      '#description' => t('Select the vocabulary that is used to detect the parent menu item of this node.'),
    );

    $form['workflow']['automenu_taxonomy_hide'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide automenu taxonomy entry'),
      '#default_value' => variable_get('automenu_taxonomy_hide_' . $form['#node_type']->type, 0),
      '#description' => t('Set all auto generated menu items of this content type to hidden'),
    );
  }
}